name: 'Terraform CICD pipeline'

on:
  push:
    branches: [ "dev" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Dev

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.1.3'

      - name: Terraform Init
        working-directory: Terraform/dev
        run: terraform init

      - name: Terraform Format
        working-directory: Terraform/dev
        run: |
          terraform fmt -recursive
          terraform fmt -check

      - name: Terraform Validate
        working-directory: Terraform/dev
        run: terraform validate

      - name: Install tfsec
        run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/
          tfsec --version

      - name: Run tfsec and Save Output
        working-directory: Terraform/dev
        run: |
          tfsec . --format text | tee tfsec-table.txt || true
          tfsec . --format json > tfsec.json || true

      - name: Terraform Plan
        working-directory: Terraform/dev
        run: |
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        working-directory: Terraform/dev
        run: |
          terraform apply -auto-approve tfplan

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: terraform-runner
    environment: Dev
    needs: terraform
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.1.3'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ secrets.AWS_REGION }}

      - name: Verify AWS Credentials
        run: aws sts get-caller-identity

      - name: Terraform Init
        working-directory: Terraform/dev
        run: terraform init

      - name: Terraform Destroy
        working-directory: Terraform/dev
        run: terraform destroy -auto-approve